// Code generated by vfsgen; DO NOT EDIT.

// +build !gen

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 25, 21, 45, 35, 131506676, time.UTC),
		},
		"/assets": &vfsgen۰DirInfo{
			name:    "assets",
			modTime: time.Date(2018, 10, 25, 21, 51, 4, 351091731, time.UTC),
		},
		"/dev": &vfsgen۰DirInfo{
			name:    "dev",
			modTime: time.Date(2018, 10, 25, 21, 46, 35, 9201276, time.UTC),
		},
		"/static": &vfsgen۰DirInfo{
			name:    "static",
			modTime: time.Date(2018, 10, 30, 12, 26, 18, 311206820, time.UTC),
		},
		"/static/icons": &vfsgen۰DirInfo{
			name:    "icons",
			modTime: time.Date(2018, 10, 25, 22, 37, 51, 533807823, time.UTC),
		},
		"/static/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 10, 25, 21, 50, 30, 993059428, time.UTC),
			uncompressedSize: 952,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xc1\x6e\x9c\x30\x10\x3d\xc3\x57\x4c\x39\x19\x69\x65\x72\x8c\xb2\x80\xd4\x5e\x7a\xac\xd4\x1c\x72\xf6\x9a\x01\x9c\x18\x0f\xf2\x98\x52\x14\xe5\xdf\x2b\xe3\xdd\x6c\xb3\x52\x9b\xc3\xae\xd1\x78\xde\x7b\xe3\x37\x33\xf5\x18\x26\xdb\xe6\x00\x00\xf5\x88\xaa\x3b\x7f\x5a\xe3\x5e\xc0\xa3\x6d\x0a\x0e\x9b\x45\x1e\x11\x43\x01\xa3\xc7\xbe\x29\x8c\xeb\xf0\xb7\xd4\xcc\x05\x54\x6d\x9e\xd5\xac\xbd\x99\x03\xb0\xd7\x4d\xb1\x2a\x9e\xe4\x33\x17\x6d\x5d\xa5\xf0\x35\xa1\xcd\xb3\xcc\xf4\x20\xbe\x3c\xe1\xe9\x2b\x33\x4e\x27\xbb\x49\xe3\x38\x28\x17\x8c\x0a\xf8\x18\x3c\xaa\xc9\xb8\xa1\x84\x57\xa8\x2a\x98\xc9\x6e\xbd\xb1\x36\xcf\xb2\xec\x33\x08\x34\xa0\x78\x73\x1a\x84\x47\x9e\x0f\x60\xa6\x99\x7c\xf8\x71\x7a\x46\x1d\x4a\x68\x5a\x78\x8d\x2c\x99\x26\xc7\x01\x98\x16\xaf\x31\x42\x56\x65\x02\x88\x74\x44\x60\x29\x95\xf7\x6a\xfb\xb6\xf4\x3d\x7a\x51\x1e\x77\x90\xc7\xb0\x78\x77\x4e\xfe\x47\x21\x22\x71\xde\x08\xef\xf8\xb7\xf8\xff\x96\xe7\x17\xf5\x81\xa0\x01\x87\x2b\x7c\xa7\xa4\x60\x31\xc0\x44\xdd\x01\x22\xdf\x31\x26\xf6\x8b\xd3\xc1\x90\x8b\x0d\x20\xd5\x89\x32\x95\xff\x99\x09\xa2\xc7\xa0\x47\x51\xa8\x79\x96\xb1\x0f\x45\x79\x80\x81\xe4\x87\x92\x64\x18\xd1\x89\xab\x57\x8b\xfd\xdb\x9f\x89\x3a\x68\x20\x85\xe5\x44\xdd\x62\x31\x79\x10\xe5\xae\x37\x49\x5c\x9f\xef\xaa\x2a\x3e\x8c\x2c\x4a\x6d\x51\xbd\xdb\x96\xfc\x1a\x48\xfa\xc5\x89\x88\x28\x3f\x50\xfd\xdf\xce\xdd\x8f\xdb\xda\x8f\x71\x2a\x3c\x32\x06\xb8\x54\xb0\x1b\x9c\x88\x7f\x29\x0f\x2b\x9f\xbd\x7d\xc2\xd3\x23\xe9\x17\x0c\xa2\x58\xf9\xa1\xaa\x2c\x69\x65\x47\xe2\xf0\x70\x7f\x77\x7f\x57\x25\x5f\x8b\x04\x5c\x59\x92\xa3\x19\x1d\x34\x20\x6e\x86\x25\xbe\xca\xd2\x20\x8a\x9f\x3b\x02\x3d\x78\x54\xdd\x26\xa5\x8c\xe0\x5d\xfd\x9d\x62\x42\x66\x35\xe0\x0d\xcb\xca\x52\x5b\x62\xbc\x4e\x53\x6a\xe9\xf1\x02\x8e\xbf\x4b\x30\xcf\xae\x6b\x53\x57\x69\x1d\xf3\xfa\x44\xdd\xd6\xd6\xd5\x7e\xe4\x31\x1e\x37\xf6\x4f\x00\x00\x00\xff\xff\x4a\x93\x0a\xff\xb8\x03\x00\x00"),
		},
		"/ui": &vfsgen۰DirInfo{
			name:    "ui",
			modTime: time.Date(2018, 10, 29, 17, 26, 29, 11455884, time.UTC),
		},
		"/ui/app.html": &vfsgen۰CompressedFileInfo{
			name:             "app.html",
			modTime:          time.Date(2018, 10, 30, 12, 26, 15, 249511772, time.UTC),
			uncompressedSize: 584,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4d\x0a\xc2\x30\x10\x46\xf7\x9e\x62\x98\x0b\x14\xeb\x0f\xa2\x49\x17\x2a\xb8\x15\x3c\x41\xed\x84\x32\x10\x33\x61\x6c\x2b\xbd\xbd\x58\x17\x6a\x17\xd5\x6e\xdc\x7e\xf0\x5e\x78\x61\xcc\x59\xa8\xcd\x26\x00\x00\xe6\x98\x07\xe7\x0f\x2a\x75\x84\x3d\xab\x2b\x2a\x96\x60\x51\xe5\x86\xb0\x15\x25\xa7\x3b\xf1\xa2\x16\x4b\x75\x2d\xc2\x29\xe6\x05\x87\xd2\x62\x8a\x4f\x7e\xc0\x51\x88\xaf\x2f\xe1\x77\x4d\xa7\x22\x6e\xe0\x5a\xb5\xde\x59\x8c\x39\x11\x87\x72\x0d\xab\x0d\x66\xf1\xf1\x04\x4c\x4d\x42\xdc\x8c\x42\xd2\xf1\xc8\xac\x87\x98\xe4\x15\xf8\xb6\x0e\x4b\xe6\x7d\xc9\xdf\x3e\x69\x31\xbe\x78\xf9\xb5\xf8\x73\x31\x49\x77\x41\xf7\x00\x00\x00\xff\xff\x63\x24\xaf\xd3\x48\x02\x00\x00"),
		},
		"/ui/button.html": &vfsgen۰FileInfo{
			name:    "button.html",
			modTime: time.Date(2018, 10, 25, 22, 2, 19, 101763013, time.UTC),
			content: []byte("\x3c\x64\x69\x76\x20\x76\x2d\x62\x69\x6e\x64\x3a\x73\x74\x79\x6c\x65\x3d\x22\x53\x74\x79\x6c\x65\x22\x3e\x0a\x20\x20\x20\x20\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x22\x62\x75\x74\x74\x6f\x6e\x22\x20\x76\x61\x6c\x75\x65\x3d\x22\x54\x65\x73\x74\x20\x42\x75\x74\x74\x6f\x6e\x21\x22\x20\x76\x2d\x6f\x6e\x3a\x63\x6c\x69\x63\x6b\x3d\x22\x4f\x6e\x43\x6c\x69\x63\x6b\x22\x20\x2f\x3e\x0a\x3c\x2f\x64\x69\x76\x3e"),
		},
		"/ui/divider.html": &vfsgen۰CompressedFileInfo{
			name:             "divider.html",
			modTime:          time.Date(2018, 10, 28, 5, 41, 44, 76250278, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\x53\x28\xd3\x4d\xca\xcc\x4b\xb1\x4a\xce\x49\x2c\x2e\xb6\x55\x72\x06\x51\x7e\x89\xb9\xa9\x4a\x30\x89\xe2\x92\xca\x9c\x54\x5b\x25\x97\xcc\xb2\xcc\x94\xd4\xa2\x60\x10\x0f\x24\x97\x9f\x67\x95\x9b\x5f\x5a\x9c\x9a\x92\x5f\x9e\x67\xab\xe4\x9f\xe7\x0b\xe2\xb8\xe4\x97\xe7\x29\xd9\x71\x29\x28\x28\x28\x20\x9b\x0d\x35\xc2\x23\x31\x2f\x25\x27\x15\x62\x82\x9d\x8d\x7e\x4a\x66\x99\x1d\x17\x84\x02\x04\x00\x00\xff\xff\xd0\xdb\x28\xba\x89\x00\x00\x00"),
		},
		"/ui/dragger.html": &vfsgen۰CompressedFileInfo{
			name:             "dragger.html",
			modTime:          time.Date(2018, 10, 29, 16, 8, 30, 815184526, time.UTC),
			uncompressedSize: 152,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\x53\x28\xd3\x4d\xca\xcc\x4b\xb1\x2a\x2e\xa9\xcc\x49\xb5\x55\x0a\x06\x51\x4a\x0a\x65\xba\xf9\x79\x56\xb9\xf9\xa5\xc5\xa9\x29\xf9\xe5\x79\xb6\x4a\xfe\x79\xbe\x20\x8e\x4b\x7e\x79\x1e\xb2\x64\x6e\x7e\x59\x2a\x5c\xd2\x37\xbf\x0c\x45\x67\x69\x01\x92\xbe\x3c\x14\xa9\xfc\xd2\x12\x54\x39\x3b\x97\xa2\xc4\x74\x05\xdf\x54\x1b\xfd\x94\xcc\x32\x3b\x40\x00\x00\x00\xff\xff\x65\xfa\xf3\x59\x98\x00\x00\x00"),
		},
		"/ui/panel.html": &vfsgen۰CompressedFileInfo{
			name:             "panel.html",
			modTime:          time.Date(2018, 10, 28, 2, 36, 51, 877488423, time.UTC),
			uncompressedSize: 289,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x4f\x03\x21\x10\x85\xef\xfd\x15\x93\x39\x69\x62\xb3\x77\xc3\x70\xd2\x78\x30\x31\x26\x3d\xf4\x8c\x0c\xea\x24\x74\x20\xcb\x96\x6e\xff\xbd\xe9\xb2\x8b\x3d\xf1\x80\x6f\xde\xbc\x67\x58\x2a\xf8\xe8\x4a\xf9\x70\xa7\x40\x98\x9d\x86\x88\x50\xf7\x5f\xa2\xfc\x5c\xa6\x6b\x0c\x84\x87\xdb\x81\x76\x07\x00\x60\x3e\x6f\xc4\xdb\x98\xce\x19\xea\xfe\x3b\x8d\x84\x0f\xc2\xf3\x13\x5c\x44\x39\x5d\x1e\x41\x14\x8e\x8b\x2c\x08\x2f\x32\x06\x3f\x49\x52\x42\x9f\xe2\xf9\xa4\xdd\x79\x71\x39\x0a\x4f\xbf\x85\xf0\xee\xd2\x81\x43\x76\x5e\xf4\x87\x70\x15\xeb\xfa\x25\x42\xf3\xdf\xc8\xf7\x70\x25\x14\x9e\xfb\x68\xfb\x26\x6c\x89\xfa\xf3\xeb\x9c\x9d\x72\x60\xc2\x4d\xa1\x35\x43\x83\xd7\x6e\xc3\x7f\x39\xbb\x33\x03\x4b\xb5\x7f\x01\x00\x00\xff\xff\x00\x6a\xc9\xf5\x21\x01\x00\x00"),
		},
		"/ui/panelgroup.html": &vfsgen۰FileInfo{
			name:    "panelgroup.html",
			modTime: time.Date(2018, 10, 29, 3, 0, 53, 876518707, time.UTC),
			content: []byte("\x3c\x64\x69\x76\x20\x72\x65\x66\x3d\x22\x45\x6c\x65\x6d\x65\x6e\x74\x22\x20\x63\x6c\x61\x73\x73\x3d\x22\x70\x61\x6e\x65\x6c\x47\x72\x6f\x75\x70\x22\x20\x76\x2d\x62\x69\x6e\x64\x3a\x73\x74\x79\x6c\x65\x3d\x22\x43\x6f\x6e\x74\x61\x69\x6e\x65\x72\x53\x74\x79\x6c\x65\x22\x3e\x0a\x20\x20\x20\x20\x3c\x73\x6c\x6f\x74\x3e\x3c\x2f\x73\x6c\x6f\x74\x3e\x0a\x3c\x2f\x64\x69\x76\x3e"),
		},
		"/ui/panelwrapper.html": &vfsgen۰CompressedFileInfo{
			name:             "panelwrapper.html",
			modTime:          time.Date(2018, 10, 29, 5, 2, 25, 67385483, time.UTC),
			uncompressedSize: 232,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xb1\xae\x83\x30\x0c\x45\x77\xbe\xc2\xf2\xc2\x84\xb2\x3f\xc5\xd9\xde\xda\x4a\xed\xd0\x39\x80\x11\x41\x01\xa2\xc4\x8a\x4a\xbf\xbe\x82\x54\x2d\x5e\xae\x65\x1f\x5d\x1d\xdd\xbb\x0c\x91\x07\xc2\x7f\xcf\x33\x2f\x82\xd0\x79\x9b\xd2\xc5\xce\x4c\x18\xec\xc2\xfe\x11\x6d\x08\x1c\x11\x72\xd3\xba\xa5\xff\x4b\xb2\x79\x26\xbc\xef\x81\xa6\x02\x00\xd0\x6b\x3b\x71\x27\xc7\xbe\x4f\x6e\xdc\x40\x78\xe3\xe4\x5e\x0c\x44\x04\x75\x92\xc8\xd2\x8d\x35\x9e\x98\x73\x5b\x61\x4b\xe7\x17\x39\xbc\xca\xe7\xda\x4e\xbf\xbb\x6c\x81\x09\x85\x9f\xa2\x46\x99\x3d\x1a\xad\x8a\xc0\xc7\x26\xf9\x55\x8c\x56\x47\x54\x5a\xf5\x2e\x9b\x77\x00\x00\x00\xff\xff\x78\xbd\x7a\x51\xe8\x00\x00\x00"),
		},
		"/ui/slider.html": &vfsgen۰CompressedFileInfo{
			name:             "slider.html",
			modTime:          time.Date(2018, 10, 25, 22, 15, 33, 182808971, time.UTC),
			uncompressedSize: 140,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\x53\x28\xd3\x4d\xca\xcc\x4b\xb1\x2a\x2e\xa9\xcc\x49\xb5\x55\x72\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x0a\x06\xf1\x95\xec\xb8\x14\x14\x14\x14\x6c\x32\xf3\x0a\x4a\x4b\xd0\x54\x06\xe7\x64\xa6\xc0\x94\x29\x94\xe9\xe6\xe7\x59\x25\x67\x24\xe6\xa5\xa7\xda\x2a\xf9\xe7\x39\x83\x59\x4a\x0a\x25\x95\x05\xa9\xb6\x4a\x45\x10\x0e\x54\x7b\x59\x62\x4e\x69\xaa\xad\x52\x18\x88\x52\x52\xd0\xb7\xe3\xb2\xd1\x4f\xc9\x2c\xb3\x03\x04\x00\x00\xff\xff\xcf\x60\x00\x6c\x8c\x00\x00\x00"),
		},
		"/ui/window.html": &vfsgen۰CompressedFileInfo{
			name:             "window.html",
			modTime:          time.Date(2018, 10, 26, 0, 32, 44, 294130052, time.UTC),
			uncompressedSize: 585,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4d\x6f\x83\x30\x0c\x86\xef\xfc\x0a\xcb\xa7\x4d\x5a\x47\x7b\x2c\x23\xec\xd0\xc3\x36\x4d\xda\x0e\x45\xda\x39\x21\x66\x8a\x9a\x26\x12\xc9\xf8\xf8\xf7\x13\x1f\x41\x14\x9a\x0b\xf6\x23\xbf\xc6\x7e\x9d\x4a\x55\x43\xa1\xb9\x73\x5f\xfc\x4a\x0c\x1b\x65\xa4\x6d\x10\xea\x9d\x50\x46\x26\xce\x77\x9a\x18\xfe\x0c\xf4\xdc\x27\x98\x45\x11\x00\xc0\x5a\xe8\x95\xd7\x24\x78\xb5\x96\xe6\x13\x0f\x62\x98\x5e\x5a\x56\xfc\xf7\x4a\xc6\x43\xbd\x2b\x6d\xc5\xf0\x41\x3d\x81\xe7\xe2\x11\x94\x81\x9c\x0b\xb7\xa8\x1d\xea\xc7\x19\x72\x2e\xc2\x0f\xbe\xcd\x49\xab\xe2\xc2\xf0\x9d\x1b\xa9\x29\xe7\xe2\x4c\x9a\x0a\x3f\x4f\xf0\x49\xdd\x87\x91\xd4\x32\x54\x33\xdb\x80\x51\x43\x92\xa1\x02\xc6\x18\x84\x1c\x5e\xc1\x57\x7f\x04\x09\x94\x5c\x3b\x9a\xeb\x87\x7d\x18\x7a\x2e\x9e\x87\x10\xb3\x34\x9e\x47\x5b\xac\x17\x87\xfd\x16\xac\xb7\xec\x42\x1d\xc3\xe3\x11\x61\xf2\xa7\xd4\xd4\xbe\x55\xb6\x49\xe0\xf0\xd2\xf7\x92\xaa\xbe\xa7\x38\xec\xf7\x6b\x67\x4f\xda\x3a\x12\xb6\x9d\x9c\x5d\x48\x43\x78\xf7\x50\x85\x35\x9e\x8c\xdf\x74\x1b\xf1\xe6\x4c\x4e\x5b\x9f\xa5\xf1\xf0\xb9\x69\x1e\x5e\x34\x82\xff\x00\x00\x00\xff\xff\x81\x91\x10\xe0\x49\x02\x00\x00"),
		},
		"/ui/windowtab.html": &vfsgen۰CompressedFileInfo{
			name:             "windowtab.html",
			modTime:          time.Date(2018, 10, 26, 0, 42, 43, 481304416, time.UTC),
			uncompressedSize: 168,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x49\xc9\x2c\x53\xe0\x52\x50\x50\x50\x28\xd3\xcd\xcf\xb3\xca\xcd\x2f\x2d\x4e\x4d\xcd\x2b\x49\x2d\xb2\x55\xf2\x48\xcc\x4b\xc9\x49\xf5\x05\x89\xf8\x97\xa5\x16\x29\xa1\x2b\xcb\x49\x4d\x2c\x4b\x45\x55\x56\x5a\x82\xac\x2a\x39\x27\x33\x39\x1b\xa6\xc0\x19\xc4\x81\xcb\x26\x65\xe6\xa5\x58\x15\x97\x54\xe6\xa4\xda\x2a\x85\x24\x26\x05\x83\x58\x4a\x76\x60\x49\x10\xa8\xae\x56\x08\xc9\x2c\xc9\x49\x55\xa8\xad\xe5\xb2\xd1\x4f\xc9\x2c\xb3\x03\x04\x00\x00\xff\xff\x0f\x15\xb4\x54\xa8\x00\x00\x00"),
		},
		"/ui/wrapper.html": &vfsgen۰FileInfo{
			name:    "wrapper.html",
			modTime: time.Date(2018, 10, 29, 17, 25, 37, 569979727, time.UTC),
			content: []byte("\x3c\x75\x6c\x3e\x0a\x20\x20\x20\x20\x3c\x73\x6c\x6f\x74\x3e\x3c\x2f\x73\x6c\x6f\x74\x3e\x0a\x3c\x2f\x75\x6c\x3e"),
		},
		"/ui/wrapperwrapped.html": &vfsgen۰FileInfo{
			name:    "wrapperwrapped.html",
			modTime: time.Date(2018, 10, 29, 17, 32, 43, 716209605, time.UTC),
			content: []byte("\x3c\x6c\x69\x3e\x3c\x73\x6c\x6f\x74\x3e\x3c\x2f\x73\x6c\x6f\x74\x3e\x3c\x2f\x6c\x69\x3e"),
		},
		"/wasm": &vfsgen۰DirInfo{
			name:    "wasm",
			modTime: time.Date(2018, 10, 25, 21, 44, 37, 16718693, time.UTC),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/assets"].(os.FileInfo),
		fs["/dev"].(os.FileInfo),
		fs["/static"].(os.FileInfo),
		fs["/ui"].(os.FileInfo),
		fs["/wasm"].(os.FileInfo),
	}
	fs["/static"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/static/icons"].(os.FileInfo),
		fs["/static/index.html"].(os.FileInfo),
	}
	fs["/ui"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/ui/app.html"].(os.FileInfo),
		fs["/ui/button.html"].(os.FileInfo),
		fs["/ui/divider.html"].(os.FileInfo),
		fs["/ui/dragger.html"].(os.FileInfo),
		fs["/ui/panel.html"].(os.FileInfo),
		fs["/ui/panelgroup.html"].(os.FileInfo),
		fs["/ui/panelwrapper.html"].(os.FileInfo),
		fs["/ui/slider.html"].(os.FileInfo),
		fs["/ui/window.html"].(os.FileInfo),
		fs["/ui/windowtab.html"].(os.FileInfo),
		fs["/ui/wrapper.html"].(os.FileInfo),
		fs["/ui/wrapperwrapped.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
